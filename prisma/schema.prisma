generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum OrderStatus {
  PENDING
  PAID
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum DisputeStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  REJECTED
}

model User {
  id           String   @id @default(uuid())
  email        String   @unique
  passwordHash String
  fullName     String
  roles        String[] @default([])
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  orders       Order[]
  cart         Cart?
  paymentIntents PaymentIntent[]
  resetTokens  PasswordResetToken[]
  disputes     Dispute[]
}

model Product {
  id          String       @id @default(uuid())
  title       String
  description String
  price       Decimal      @db.Decimal(10, 2)
  sku         String       @unique
  make        String?
  model       String?
  year        Int?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  orderItems  OrderItem[]
  cartItems   CartItem[]
}

model Order {
  id        String      @id @default(uuid())
  userId    String
  user      User        @relation(fields: [userId], references: [id])
  total     Decimal     @db.Decimal(10, 2)
  createdAt DateTime    @default(now())
  items     OrderItem[]
  paymentIntents PaymentIntent[]
  status    OrderStatus @default(PENDING)
  history   OrderHistory[]
  disputes  Dispute[]
}

model OrderItem {
  id        String  @id @default(uuid())
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id])
  productId String
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int     @default(1)
  price     Decimal @db.Decimal(10, 2)
}

model Cart {
  id        String     @id @default(uuid())
  userId    String     @unique
  user      User       @relation(fields: [userId], references: [id])
  items     CartItem[]
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id        String  @id @default(uuid())
  cartId    String
  cart      Cart    @relation(fields: [cartId], references: [id])
  productId String
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int     @default(1)
}

model PaymentIntent {
  id          String   @id @default(uuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  reference   String   @unique
  amount      Decimal  @db.Decimal(10, 2)
  currency    String   @default("NGN")
  status      String   @default("pending")
  orderId     String?
  order       Order?   @relation(fields: [orderId], references: [id])
  createdAt   DateTime @default(now())
}

model OrderHistory {
  id        String      @id @default(uuid())
  orderId   String
  order     Order       @relation(fields: [orderId], references: [id])
  status    OrderStatus
  note      String?
  createdAt DateTime    @default(now())
}

model PasswordResetToken {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  token     String   @unique
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now()) 
}

model Dispute {
  id          String        @id @default(uuid())
  userId      String
  user        User          @relation(fields: [userId], references: [id])
  orderId     String
  order       Order         @relation(fields: [orderId], references: [id])
  status      DisputeStatus @default(OPEN)
  title       String
  description String
  adminNotes  String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}


